{
  "hash": "431996a841b778bb8979ef377f952fbf",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"New Features in cendat ver 0.4.1\"\ndescription: \"This post covers some new cendat features.\"\ndate: 2025-08-22\nauthor:\n    - name: Lance Couzens\n      url: https://mostlyunoriginal.github.io  \ncategories: [Python, cendat, Census, API]\ncitation: \n  url: https://mostlyunoriginal.github.io/posts/2025-08-22-cendat-new-features/\nimage: Preview.png\ndraft: true\nlightbox: true\n---\n\n# New Version, New Features\n\nSince the introductory post, I've added some new features to make `cendat` more robust, user-friendly, and capable:\n\n  1. The biggest update is the addition of the `tabulate()` method for the `CenDatResponse` objects returned by `get_data()`.\n\n  2. The `CenDatResponse` methods `to_polars()` and `to_pandas()` got new functionality\n     - Automatic concatenation via the new `concat` parameter, which defaults to `False` for backward compatibility with prior versions\n     - Destringing--the Census API returns all data in strings, which prevents polars and pandas from inferring the schema. You can now set `destring=True` to force type conversion on the raw response data and allow polars and pandas to infer the schema automatically. This parameter defaults to `False`, and the schema may still be specified by the user via `schema_overrides` with or without destringing.\n\n  3. The user can now specify the API timeout count in seconds via `timeout` in the `get_data()` method to accommodate longer requests--the default is 30 seconds.\n\n  4. The `get_data()` method gained the `preview_only` parameter (boolean, defaults to `False`). If `True`, the number of API queries required to satisfy the request will be determined and messaged, but the queries will not be executed. This is a handy precursor step when dealing with very granular or unfamiliar geographic summary levels which could yield tens of thousands of queries.\n\n  5. Pattern matching in the `list_variables()` method has been extended to the \"concept\" field.\n\n# Examples\n\nThese primarilly illustrate usage of the new `tabulate()` method.\n\n## Quick ACS Aggregate Analysis\n\nHere we want to see how many counties in the U.S., as of 2023, had a million or more residents, and how many people lived in those counties.\n\n::: {#9dc0285d .cell execution_count=1}\n``` {.python .cell-code}\n%%time\n\nfrom cendat import CenDatHelper\nfrom dotenv import load_dotenv\nimport os\nfrom pprint import pprint\nimport polars as pl\nload_dotenv()\n\ncdh = CenDatHelper(key=os.getenv('CENSUS_API_KEY'))\n\ncdh.list_products(years=[2023], patterns=r\"/acs/acs1\\)\")\ncdh.set_products()\ncdh.set_variables(\"B01001_001E\") # total population\ncdh.set_geos(\"050\") # counties\nresponse = cdh.get_data()\n\n# how many counties\nresponse.tabulate(\"state\", where=\"B01001_001E > 1_000_000\")\n\n# how many people in those counties\nresponse.tabulate(\"state\", weight_var=\"B01001_001E\", where=\"B01001_001E > 1_000_000\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n✅ API key loaded successfully.\n✅ Product set: 'ACS 1-Year Detailed Tables (2023/acs/acs1)' (Vintage: [2023])\n✅ Variables set:\n  - Product: ACS 1-Year Detailed Tables (2023/acs/acs1) (Vintage: [2023])\n    Variables: B01001_001E\n✅ Geographies set: 'county' (requires `within` for: state)\n✅ Parameters created for 1 geo-variable combinations.\nℹ️ Fetching parent geographies for 'county'...\n✅ Found 52 combinations for 'county' within the specified scope.\nℹ️ Making 52 API call(s)...\nshape: (18, 5)\n┌───────┬────┬──────┬──────┬────────┐\n│ state ┆  n ┆  pct ┆ cumn ┆ cumpct │\n╞═══════╪════╪══════╪══════╪════════╡\n│    04 ┆  2 ┆  4.2 ┆    2 ┆    4.2 │\n│    06 ┆ 10 ┆ 20.8 ┆   12 ┆   25.0 │\n│    12 ┆  6 ┆ 12.5 ┆   18 ┆   37.5 │\n│    13 ┆  1 ┆  2.1 ┆   19 ┆   39.6 │\n│    17 ┆  1 ┆  2.1 ┆   20 ┆   41.7 │\n│    24 ┆  1 ┆  2.1 ┆   21 ┆   43.8 │\n│    25 ┆  1 ┆  2.1 ┆   22 ┆   45.8 │\n│    26 ┆  2 ┆  4.2 ┆   24 ┆   50.0 │\n│    27 ┆  1 ┆  2.1 ┆   25 ┆   52.1 │\n│    32 ┆  1 ┆  2.1 ┆   26 ┆   54.2 │\n│    36 ┆  6 ┆ 12.5 ┆   32 ┆   66.7 │\n│    37 ┆  2 ┆  4.2 ┆   34 ┆   70.8 │\n│    39 ┆  2 ┆  4.2 ┆   36 ┆   75.0 │\n│    42 ┆  2 ┆  4.2 ┆   38 ┆   79.2 │\n│    48 ┆  7 ┆ 14.6 ┆   45 ┆   93.8 │\n│    49 ┆  1 ┆  2.1 ┆   46 ┆   95.8 │\n│    51 ┆  1 ┆  2.1 ┆   47 ┆   97.9 │\n│    53 ┆  1 ┆  2.1 ┆   48 ┆  100.0 │\n└───────┴────┴──────┴──────┴────────┘\nshape: (18, 5)\n┌───────┬────────────┬──────┬────────────┬────────┐\n│ state ┆          n ┆  pct ┆       cumn ┆ cumpct │\n╞═══════╪════════════╪══════╪════════════╪════════╡\n│    04 ┆  5,649,033 ┆  5.8 ┆  5,649,033 ┆    5.8 │\n│    06 ┆ 28,013,381 ┆ 28.7 ┆ 33,662,414 ┆   34.5 │\n│    12 ┆ 10,221,001 ┆ 10.5 ┆ 43,883,415 ┆   45.0 │\n│    13 ┆  1,079,105 ┆  1.1 ┆ 44,962,520 ┆   46.1 │\n│    17 ┆  5,087,072 ┆  5.2 ┆ 50,049,592 ┆   51.3 │\n│    24 ┆  1,058,474 ┆  1.1 ┆ 51,108,066 ┆   52.4 │\n│    25 ┆  1,623,952 ┆  1.7 ┆ 52,732,018 ┆   54.1 │\n│    26 ┆  3,021,595 ┆  3.1 ┆ 55,753,613 ┆   57.1 │\n│    27 ┆  1,258,713 ┆  1.3 ┆ 57,012,326 ┆   58.4 │\n│    32 ┆  2,336,573 ┆  2.4 ┆ 59,348,899 ┆   60.8 │\n│    36 ┆ 10,672,233 ┆ 10.9 ┆ 70,021,132 ┆   71.8 │\n│    37 ┆  2,353,976 ┆  2.4 ┆ 72,375,108 ┆   74.2 │\n│    39 ┆  2,559,151 ┆  2.6 ┆ 74,934,259 ┆   76.8 │\n│    42 ┆  2,775,367 ┆  2.8 ┆ 77,709,626 ┆   79.7 │\n│    48 ┆ 15,250,132 ┆ 15.6 ┆ 92,959,758 ┆   95.3 │\n│    49 ┆  1,185,813 ┆  1.2 ┆ 94,145,571 ┆   96.5 │\n│    51 ┆  1,141,878 ┆  1.2 ┆ 95,287,449 ┆   97.7 │\n│    53 ┆  2,271,380 ┆  2.3 ┆ 97,558,829 ┆  100.0 │\n└───────┴────────────┴──────┴────────────┴────────┘\nCPU times: user 565 ms, sys: 179 ms, total: 744 ms\nWall time: 9.35 s\n```\n:::\n:::\n\n\nIn 2023 there were 48 counties with populations over a million (mostly in California, Florida, New York, and Texas), and the total population across those counties was nearly 98 million.\n\n## CPS Microdata Tabulation\n\nIn this example, we'll pull microdata from the Current Population Survey's tobacco supplements for 2022 and 2023, and compare the proportions of established daily smokers across a selection of states. We'll start with just 2022 to limit the output in our variable search. We're looking for variables that indicate the respondent has smooked at least 100 cigarettes and is a current every day smoker.\n\n::: {#0d4283f5 .cell execution_count=2}\n``` {.python .cell-code}\ncdh.list_products(years=[2022], patterns=\"/cps/tobacco\")\ncdh.set_products()\nfor var in cdh.list_variables(patterns=[r\"smoke.*every day\", \"100\"], logic=any):\n    print(var['name'], var['label'])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n✅ Product set: 'Current Population Survey: Tobacco Use Supplement (2022/cps/tobacco/sep)' (Vintage: [2022])\nPEB7C How long have you smoked every day\nPEC7D How long did you smoke every day\nPEC7A Current some day smokers ever smoke every day for 6 months\nPEA1 Smoked at least 100 cigarettes\nPEA3 Categorize now smoke: every day  some days  not at all.\nPEC8 Current some day smoker was every day  some days  or not at all 12 months ago\nPTC7E Howm many cigs smoked each day when smoking every day\nPEH6 Smoked every day  some days  or not at all\nPEH5 For how long smoked EVERY DAY\n```\n:::\n:::\n\n\nIt looks like we're interested in `PEA1` and `PEA3`--we'll inspect the full variable dictionaries to make sure.\n\n::: {#6e2de62d .cell execution_count=3}\n``` {.python .cell-code}\ncdh.list_variables(patterns=[\"PEA1\", \"PEA3\"], logic=any, match_in=\"name\")\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n[{'name': 'PEA1',\n  'label': 'Smoked at least 100 cigarettes',\n  'concept': 'N/A',\n  'group': 'N/A',\n  'values': {'item': {'-2': \"Don't Know\",\n    '2': 'No',\n    '-1': 'Not in universe',\n    '-3': 'Refused',\n    '1': 'Yes',\n    '-9': 'No Answer'}},\n  'type': 'int',\n  'sugg_wgt': 'PWNRWGT',\n  'product': 'Current Population Survey: Tobacco Use Supplement (2022/cps/tobacco/sep)',\n  'vintage': [2022],\n  'url': 'http://api.census.gov/data/2022/cps/tobacco/sep'},\n {'name': 'PEA3',\n  'label': 'Categorize now smoke: every day  some days  not at all.',\n  'concept': 'N/A',\n  'group': 'N/A',\n  'values': {'item': {'2': 'Some_days',\n    '1': 'Every_day',\n    '-2': \"Don't Know\",\n    '3': 'Not_at_all',\n    '-3': 'Refused',\n    '-9': 'No Answer',\n    '-1': 'Not in universe'}},\n  'type': 'int',\n  'sugg_wgt': 'PWNRWGT',\n  'product': 'Current Population Survey: Tobacco Use Supplement (2022/cps/tobacco/sep)',\n  'vintage': [2022],\n  'url': 'http://api.census.gov/data/2022/cps/tobacco/sep'}]\n```\n:::\n:::\n\n\nThese variables get at what we want, and since we're interested in the proportion among all adults, we can ignore the out of universe responsdents (likely never smokers that didn't make it past a gate question... this is just an example, so we don't need to dig any deeper). \n\nNote that we can also see the suggested weights to use for analysis of these variables, so we'll include that in our set variables list. First, though, we'll expand our products to cover 2023 as well.\n\n::: {#f27ba96a .cell execution_count=4}\n``` {.python .cell-code}\ncdh.list_products(years=[2022, 2023], patterns=\"/cps/tobacco\")\ncdh.set_products()\ncdh.set_variables([\"PEA1\", \"PEA3\", \"PWSRWGT\"])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n✅ Product set: 'Current Population Survey: Tobacco Use Supplement (2022/cps/tobacco/sep)' (Vintage: [2022])\n✅ Product set: 'Current Population Survey: Tobacco Use Supplement (2023/cps/tobacco/jan)' (Vintage: [2023])\n✅ Product set: 'Current Population Survey: Tobacco Use Supplement (2023/cps/tobacco/may)' (Vintage: [2023])\n✅ Variables set:\n  - Product: Current Population Survey: Tobacco Use Supplement (2022/cps/tobacco/sep) (Vintage: [2022])\n    Variables: PEA1, PEA3, PWSRWGT\n  - Product: Current Population Survey: Tobacco Use Supplement (2023/cps/tobacco/jan) (Vintage: [2023])\n    Variables: PEA1, PEA3, PWSRWGT\n  - Product: Current Population Survey: Tobacco Use Supplement (2023/cps/tobacco/may) (Vintage: [2023])\n    Variables: PEA1, PEA3, PWSRWGT\n```\n:::\n:::\n\n\nNext, we'll set our geography of interest--states, specified by description (vs sumlev)--and get our data. Since this is a microdata request, we have to explicitly specify the geographies we want, corresponding to the summary level we set in `set_geos()`. We'll specify our states in the `within` argument of `get_data()`. Let's assume we're interested in comparing the proportions between California (06) and Texas (48).\n\n::: {#ac46f209 .cell execution_count=5}\n``` {.python .cell-code}\ncdh.set_geos(\"state\", \"desc\")\nresponse = cdh.get_data(within={'state': ['06', '48']})\nresponse.tabulate(\n    \"PEA1\", \"PEA3\",\n    strat_by=\"state\",\n    weight_var=\"PWSRWGT\",\n    weight_div=3,\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n✅ Geographies set: 'state'\n✅ Parameters created for 3 geo-variable combinations.\nℹ️ Making 6 API call(s)...\nshape: (43, 7)\n┌───────┬──────┬──────┬──────────────┬──────┬──────────────┬────────┐\n│ state ┆ PEA1 ┆ PEA3 ┆            n ┆  pct ┆         cumn ┆ cumpct │\n╞═══════╪══════╪══════╪══════════════╪══════╪══════════════╪════════╡\n│    48 ┆   -3 ┆   -3 ┆      2,756.2 ┆  0.0 ┆      2,756.2 ┆    0.0 │\n│    48 ┆   -3 ┆   -2 ┆          0.0 ┆  0.0 ┆      2,756.2 ┆    0.0 │\n│    48 ┆   -3 ┆   -1 ┆     29,412.3 ┆  0.1 ┆     32,168.6 ┆    0.1 │\n│    48 ┆   -3 ┆    3 ┆     11,466.1 ┆  0.1 ┆     43,634.7 ┆    0.2 │\n│    48 ┆   -2 ┆   -9 ┆     13,064.5 ┆  0.1 ┆     56,699.3 ┆    0.3 │\n│    48 ┆   -2 ┆   -2 ┆          0.0 ┆  0.0 ┆     56,699.3 ┆    0.3 │\n│    48 ┆   -2 ┆   -1 ┆      8,368.9 ┆  0.0 ┆     65,068.2 ┆    0.3 │\n│    48 ┆   -2 ┆    2 ┆      4,700.8 ┆  0.0 ┆     69,769.0 ┆    0.3 │\n│    48 ┆   -2 ┆    3 ┆          0.0 ┆  0.0 ┆     69,769.0 ┆    0.3 │\n│    48 ┆   -1 ┆   -1 ┆          0.0 ┆  0.0 ┆     69,769.0 ┆    0.3 │\n│    48 ┆    1 ┆   -9 ┆      2,399.3 ┆  0.0 ┆     72,168.3 ┆    0.3 │\n│    48 ┆    1 ┆   -3 ┆      7,364.1 ┆  0.0 ┆     79,532.4 ┆    0.4 │\n│    48 ┆    1 ┆   -2 ┆      3,584.2 ┆  0.0 ┆     83,116.6 ┆    0.4 │\n│    48 ┆    1 ┆    1 ┆  1,256,853.1 ┆  5.6 ┆  1,339,969.7 ┆    6.0 │\n│    48 ┆    1 ┆    2 ┆    589,742.4 ┆  2.6 ┆  1,929,712.1 ┆    8.6 │\n│    48 ┆    1 ┆    3 ┆  3,259,342.3 ┆ 14.6 ┆  5,189,054.4 ┆   23.2 │\n│    48 ┆    2 ┆   -9 ┆     13,255.7 ┆  0.1 ┆  5,202,310.0 ┆   23.3 │\n│    48 ┆    2 ┆   -1 ┆ 10,744,517.3 ┆ 48.1 ┆ 15,946,827.3 ┆   71.4 │\n│    48 ┆    2 ┆    2 ┆     56,334.2 ┆  0.3 ┆ 16,003,161.5 ┆   71.6 │\n│    48 ┆    2 ┆    3 ┆  6,343,550.5 ┆ 28.4 ┆ 22,346,712.0 ┆  100.0 │\n│     6 ┆   -9 ┆   -1 ┆      3,331.4 ┆  0.0 ┆      3,331.4 ┆    0.0 │\n│     6 ┆   -3 ┆   -3 ┆      4,761.5 ┆  0.0 ┆      8,092.9 ┆    0.0 │\n│     6 ┆   -3 ┆   -1 ┆     36,345.0 ┆  0.1 ┆     44,437.8 ┆    0.1 │\n│     6 ┆   -3 ┆    3 ┆     12,168.2 ┆  0.0 ┆     56,606.1 ┆    0.2 │\n│     6 ┆   -2 ┆   -9 ┆          0.0 ┆  0.0 ┆     56,606.1 ┆    0.2 │\n│     6 ┆   -2 ┆   -3 ┆          0.0 ┆  0.0 ┆     56,606.1 ┆    0.2 │\n│     6 ┆   -2 ┆   -2 ┆          0.0 ┆  0.0 ┆     56,606.1 ┆    0.2 │\n│     6 ┆   -2 ┆   -1 ┆     58,476.3 ┆  0.2 ┆    115,082.3 ┆    0.4 │\n│     6 ┆   -2 ┆    3 ┆          0.0 ┆  0.0 ┆    115,082.3 ┆    0.4 │\n│     6 ┆   -1 ┆   -1 ┆          0.0 ┆  0.0 ┆    115,082.3 ┆    0.4 │\n│     6 ┆    1 ┆   -9 ┆     15,334.5 ┆  0.1 ┆    130,416.9 ┆    0.4 │\n│     6 ┆    1 ┆   -3 ┆     15,778.8 ┆  0.1 ┆    146,195.7 ┆    0.5 │\n│     6 ┆    1 ┆   -2 ┆      1,879.6 ┆  0.0 ┆    148,075.3 ┆    0.5 │\n│     6 ┆    1 ┆    1 ┆  1,086,262.4 ┆  3.6 ┆  1,234,337.7 ┆    4.1 │\n│     6 ┆    1 ┆    2 ┆    547,549.0 ┆  1.8 ┆  1,781,886.7 ┆    5.9 │\n│     6 ┆    1 ┆    3 ┆  3,950,257.1 ┆ 13.2 ┆  5,732,143.8 ┆   19.1 │\n│     6 ┆    2 ┆   -9 ┆     19,101.0 ┆  0.1 ┆  5,751,244.8 ┆   19.2 │\n│     6 ┆    2 ┆   -3 ┆      6,544.0 ┆  0.0 ┆  5,757,788.8 ┆   19.2 │\n│     6 ┆    2 ┆   -2 ┆          0.0 ┆  0.0 ┆  5,757,788.8 ┆   19.2 │\n│     6 ┆    2 ┆   -1 ┆ 16,097,353.5 ┆ 53.7 ┆ 21,855,142.3 ┆   72.8 │\n│     6 ┆    2 ┆    1 ┆     21,743.5 ┆  0.1 ┆ 21,876,885.8 ┆   72.9 │\n│     6 ┆    2 ┆    2 ┆     74,863.7 ┆  0.2 ┆ 21,951,749.5 ┆   73.2 │\n│     6 ┆    2 ┆    3 ┆  8,050,987.0 ┆ 26.8 ┆ 30,002,736.5 ┆  100.0 │\n└───────┴──────┴──────┴──────────────┴──────┴──────────────┴────────┘\n```\n:::\n:::\n\n\nWe're interested in the rows where `PEA1 == 1` (have smoked 100+ cigarettes) and `PEA3 == 1` (currently smoke every day). Since we're pooling three supplement waves, we need to divide the weights by 3 to get totals that make sense. We also stratify by state to get results that are comparable across states.\n\nIn 2022/2023, 5.6% of adults in Texas were estimated to be established, daily cigarette smokers. The figure in California was 3.6%.\n\n",
    "supporting": [
      "index_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}