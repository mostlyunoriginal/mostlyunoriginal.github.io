{
  "hash": "807e2121d68336221d7af52f5593e239",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"cendat ver 0.7.0a3\"\ndescription: \"A new preview version with geometry fetching\"\ndate: 2025-09-03\nauthor:\n    - name: Lance Couzens\n      url: https://mostlyunoriginal.github.io  \ncategories: [Python, cendat, Census, API]\ncitation: \n  url: https://mostlyunoriginal.github.io/posts/2025-09-03-cendat-geo-fetching-alpha-release/\nimage: logo.png \ndraft: false\nlightbox: true\n---\n\n# New Core Functionality Unlocked\n\nIt was always the case that `cendat` would eventually support geometry/polygon fetching for aggregate products, but it took a little while to implement because I didn't want to tack it on as a sequential process–I wanted it to run concurrently with the data fetching, and this required a pretty substantial rewrite of `get_data` and the addition of several new internal methods. That work is now complete enough for me to share an alpha/preview release version which you can install with pip:\n\n``` bash\npip install --pre --upgrade cendat\n```\n\nThat'll get you `ver 0.7.0a3`. Note that you will need `pandas` and `geopandas` to unlock the new geometry fetching features. New syntax is reflected in the landing page for this version at <https://pypi.org/project/cendat/0.7.0a3/>, but the short version is that there's now an `include_geometry` parameter in `get_data` and there is a new `to_gpd` method in the `CenDatResponse` class that joins the fetched data and polygons and outputs a `Pandas GeoDataFrame`. Here's an example:\n\n::: {#ea64485a .cell execution_count=1}\n``` {.python .cell-code}\nfrom cendat import CenDatHelper\nfrom dotenv import load_dotenv\nimport os\n\nload_dotenv()\n\ncdh = CenDatHelper(key=os.getenv(\"CENSUS_API_KEY\"))\ncdh.list_products(2023, r\"acs/acs5\\)\")\ncdh.set_products()\ncdh.list_groups(patterns=r\"^race\")\ncdh.set_groups([\"B02001\"])\ncdh.describe_groups()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n✅ API key loaded successfully.\n✅ Product set: 'ACS 5-Year Detailed Tables (2023/acs/acs5)' (Vintage: [2023])\n✅ Groups set: B02001\n\n--- Group: B02001 (Race) ---\n\n  Product: ACS 5-Year Detailed Tables (2023/acs/acs5) (Vintage: 2023)\n      B02001_001E: Total:\n        B02001_002E: White alone\n        B02001_003E: Black or African American alone\n        B02001_004E: American Indian and Alaska Native alone\n        B02001_005E: Asian alone\n        B02001_006E: Native Hawaiian and Other Pacific Islander alone\n        B02001_007E: Some Other Race alone\n        B02001_008E: Two or More Races:\n          B02001_009E: Two races including Some Other Race\n          B02001_010E: Two races excluding Some Other Race, and three or more races\n```\n:::\n:::\n\n\nHere we're looking at the core race group in the 2023 ACS 5-year product. We will bypass variable listing/setting and just pull everything from the group (this was a new feature in `ver 0.6.0` that I never got around to writing a post about).\n\n::: {#18962522 .cell execution_count=2}\n``` {.python .cell-code}\n%%time\n\ncdh.set_geos(\"050\")\nresponse = cdh.get_data(\n    include_names=True,\n    include_geometry=True,\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n✅ Geographies set: 'county' (requires `within` for: state)\n✅ Parameters created for 1 geo-variable/group combinations.\n✅ Successfully fetched map servers.\n✅ Successfully fetched map server layers.\nℹ️ Discovering parent geographies for: ['state']\n✅ Found 52 combinations. Building API queries...\nℹ️ Making 52 API call(s)...\nℹ️ Pre-querying for geometry counts to determine pagination...\n  - Found 9 geometries for WHERE 'STATE IN ('09')...'. Building paginated tasks.\n  - Found 46 geometries for WHERE 'STATE IN ('45')...'. Building paginated tasks.\n  - Found 56 geometries for WHERE 'STATE IN ('30')...'. Building paginated tasks.\n  - Found 5 geometries for WHERE 'STATE IN ('44')...'. Building paginated tasks.\n  - Found 83 geometries for WHERE 'STATE IN ('26')...'. Building paginated tasks.\n  - Found 105 geometries for WHERE 'STATE IN ('20')...'. Building paginated tasks.\n  - Found 115 geometries for WHERE 'STATE IN ('29')...'. Building paginated tasks.\n  - Found 100 geometries for WHERE 'STATE IN ('37')...'. Building paginated tasks.\n  - Found 93 geometries for WHERE 'STATE IN ('31')...'. Building paginated tasks.\n  - Found 30 geometries for WHERE 'STATE IN ('02')...'. Building paginated tasks.\n  - Found 64 geometries for WHERE 'STATE IN ('08')...'. Building paginated tasks.\n  - Found 120 geometries for WHERE 'STATE IN ('21')...'. Building paginated tasks.\n  - Found 58 geometries for WHERE 'STATE IN ('06')...'. Building paginated tasks.\n  - Found 92 geometries for WHERE 'STATE IN ('18')...'. Building paginated tasks.\n  - Found 64 geometries for WHERE 'STATE IN ('22')...'. Building paginated tasks.\n  - Found 99 geometries for WHERE 'STATE IN ('19')...'. Building paginated tasks.\n  - Found 67 geometries for WHERE 'STATE IN ('42')...'. Building paginated tasks.\n  - Found 87 geometries for WHERE 'STATE IN ('27')...'. Building paginated tasks.\n  - Found 77 geometries for WHERE 'STATE IN ('40')...'. Building paginated tasks.\n  - Found 44 geometries for WHERE 'STATE IN ('16')...'. Building paginated tasks.\n  - Found 36 geometries for WHERE 'STATE IN ('41')...'. Building paginated tasks.\n  - Found 21 geometries for WHERE 'STATE IN ('34')...'. Building paginated tasks.\n  - Found 17 geometries for WHERE 'STATE IN ('32')...'. Building paginated tasks.\n  - Found 102 geometries for WHERE 'STATE IN ('17')...'. Building paginated tasks.\n  - Found 29 geometries for WHERE 'STATE IN ('49')...'. Building paginated tasks.\n  - Found 88 geometries for WHERE 'STATE IN ('39')...'. Building paginated tasks.\n  - Found 75 geometries for WHERE 'STATE IN ('05')...'. Building paginated tasks.\n  - Found 15 geometries for WHERE 'STATE IN ('04')...'. Building paginated tasks.\n  - Found 53 geometries for WHERE 'STATE IN ('38')...'. Building paginated tasks.\n  - Found 5 geometries for WHERE 'STATE IN ('15')...'. Building paginated tasks.\n  - Found 82 geometries for WHERE 'STATE IN ('28')...'. Building paginated tasks.\n  - Found 62 geometries for WHERE 'STATE IN ('36')...'. Building paginated tasks.\n  - Found 95 geometries for WHERE 'STATE IN ('47')...'. Building paginated tasks.\n  - Found 16 geometries for WHERE 'STATE IN ('23')...'. Building paginated tasks.\n  - Found 3 geometries for WHERE 'STATE IN ('10')...'. Building paginated tasks.\n  - Found 14 geometries for WHERE 'STATE IN ('25')...'. Building paginated tasks.\n  - Found 159 geometries for WHERE 'STATE IN ('13')...'. Building paginated tasks.\n  - Found 254 geometries for WHERE 'STATE IN ('48')...'. Building paginated tasks.\n  - Found 10 geometries for WHERE 'STATE IN ('33')...'. Building paginated tasks.\n  - Found 66 geometries for WHERE 'STATE IN ('46')...'. Building paginated tasks.\n  - Found 67 geometries for WHERE 'STATE IN ('12')...'. Building paginated tasks.\n  - Found 1 geometries for WHERE 'STATE IN ('11')...'. Building paginated tasks.\n  - Found 24 geometries for WHERE 'STATE IN ('24')...'. Building paginated tasks.\n  - Found 55 geometries for WHERE 'STATE IN ('54')...'. Building paginated tasks.\n  - Found 33 geometries for WHERE 'STATE IN ('35')...'. Building paginated tasks.\n  - Found 14 geometries for WHERE 'STATE IN ('50')...'. Building paginated tasks.\n  - Found 39 geometries for WHERE 'STATE IN ('53')...'. Building paginated tasks.\n  - Found 67 geometries for WHERE 'STATE IN ('01')...'. Building paginated tasks.\n  - Found 78 geometries for WHERE 'STATE IN ('72')...'. Building paginated tasks.\n  - Found 133 geometries for WHERE 'STATE IN ('51')...'. Building paginated tasks.\n  - Found 23 geometries for WHERE 'STATE IN ('56')...'. Building paginated tasks.\n  - Found 72 geometries for WHERE 'STATE IN ('55')...'. Building paginated tasks.\nℹ️ Fetching geometries across 52 paginated calls...\n✅ Data fetching complete. Stacking results.\n✅ Geometry fetching complete. Stacking results.\nCPU times: user 8.54 s, sys: 1.23 s, total: 9.78 s\nWall time: 24.4 s\n```\n:::\n:::\n\n\nWe choose county-level data and indicate that geometries should be fetched alongside the data. Note that the TIGERweb REST Service has different limitations than the data API, and national queries that would work on the data side are rejected for geometries. For all queries where `include_geometry=True`, we give up some of the wildcarding capability that we would otherwise have: `optionalWithWCFor` is ignored and the least granular `wildcards` level is ignored–for counties that means that states can no longer be omitted or wildcarded. We can see that in this example each state was queried individually (still in a concurrent thread pool, once the record counts are obtained), while for a data-only request, only a single API query would be issued.\n\nNote also the use of 'paginated' in the informational prints–the TIGERweb REST Service limits queries to 1,000 records, so any query that goes over is broken into multiple 'paginated' requests. No state has more than 1,000 counties, so we don't leverage that here, but you would see it, for example, in a request for all places in the nation.\n\nThese 'paginated' queries are issued concurrently in a dedicated thread pool that is itself executed in its own thread concurrently with the main data API queries. So, while fetching geometries can make `get_data` calls take longer than they otherwise would, in those cases it takes no longer than it would to fetch the geometries alone. We can see evidence of that in this example: the data fetching success message happens before geometries are fetched and stacked, even though the two tasks are kicked off simultaneously.\n\nJust like with the `to_pandas` and `to_polars` methods, the new `to_gpd` method is invoked on the `CenDatResponse` object:\n\n::: {#9da15477 .cell execution_count=3}\n``` {.python .cell-code}\ngdf = response.to_gpd(destring=True, join_strategy='left')\nprint(gdf.head())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                               NAME          GEO_ID  B02001_001E B02001_001EA  \\\n0  Abbeville County, South Carolina  0500000US45001        24352         None   \n1      Aiken County, South Carolina  0500000US45003       171949         None   \n2  Allendale County, South Carolina  0500000US45005         7738         None   \n3   Anderson County, South Carolina  0500000US45007       207218         None   \n4    Bamberg County, South Carolina  0500000US45009        13164         None   \n\n   B02001_001M B02001_001MA  B02001_002E B02001_002EA  B02001_002M  \\\n0   -555555555        *****        16882         None          212   \n1   -555555555        *****       113667         None          845   \n2   -555555555        *****         1871         None           78   \n3   -555555555        *****       159966         None          919   \n4   -555555555        *****         4979         None           99   \n\n  B02001_002MA  ...  B02001_010M B02001_010MA  state county  GEOID  \\\n0         None  ...          180         None     45    001  45001   \n1         None  ...          770         None     45    003  45003   \n2         None  ...           69         None     45    005  45005   \n3         None  ...         1139         None     45    007  45007   \n4         None  ...           94         None     45    009  45009   \n\n                                            geometry  \\\n0  POLYGON ((-82.50085 34.0719, -82.50077 34.0719...   \n1  POLYGON ((-81.37349 33.49051, -81.3711 33.4924...   \n2  POLYGON ((-81.61356 33.09567, -81.61403 33.095...   \n3  POLYGON ((-82.57851 34.31332, -82.57841 34.313...   \n4  POLYGON ((-81.22267 33.44, -81.22266 33.43994,...   \n\n                                      product vintage  sumlev    desc  \n0  ACS 5-Year Detailed Tables (2023/acs/acs5)    2023     050  county  \n1  ACS 5-Year Detailed Tables (2023/acs/acs5)    2023     050  county  \n2  ACS 5-Year Detailed Tables (2023/acs/acs5)    2023     050  county  \n3  ACS 5-Year Detailed Tables (2023/acs/acs5)    2023     050  county  \n4  ACS 5-Year Detailed Tables (2023/acs/acs5)    2023     050  county  \n\n[5 rows x 50 columns]\n```\n:::\n:::\n\n\nFor many aggregate products supported by `cendat` there is no specific TIGERweb map server (i.e., vintage) and in these cases, the 'Current' version is used. That could result in data with no corresponding geometry, or geometries with no data. In these cases, if `join_strategy='left'`, the `GeoDataFrame` will have rows with empty geometries. You can set `join_strategy='inner'` to filter the output to data rows with matched geometries.\n\nNow that geometries are supported, users can do all the cool things that enables, like plotting choropleth maps. One of my next development goals, in fact, is to add in one or more methods to support just that.\n\nAs always, more to come...\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}