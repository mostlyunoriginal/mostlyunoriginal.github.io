{
  "hash": "1009f9f484100b41c34d098f1d9a19f2",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Introducing cendat, a Python Library for Simplifying and Speeding up Use of the Census API\"\ndescription: \"This post introduces cendat and demonstrates its use through examples.\"\ndate: 2025-08-13\nauthor:\n    - name: Lance Couzens\n      url: https://mostlyunoriginal.github.io  \ncategories: [Python, cendat, Census, API]\ncitation: \n  url: https://mostlyunoriginal.github.io/posts/2025-08-13-Introducing-cendat/\nimage: logo.png \ndraft: false\nlightbox: true\n---\n\n## Background\n\nThe U.S. Census Bureau makes available through its free, public API mountains of data, though navigating it and acquiring the data you need can be tricky, especially for complex, nested geographic summary levels like those available in American Community Survey (ACS) data products. The Census Bureau provides buckets of features and nuance in its data portal <https://data.census.gov>, but this doesn't address the need to acquire data programmatically or in aggregate across the many 'drill-down' geographies required for certain summary levels. The API addresses the first problem, but on its own it does nothing to address the second. To acquire estimates at certain levels–even for a single state–may require several thousand API queries, and while data can be downloaded in bulk from <https://www2.census.gov>, you may have to sift through a lot of what you don't need to get at what you do. It's also not well-suited for obtaining data in-script.\n\n`cendat` aims to address the programmatic need while leveraging automatic query building and concurrency to quickly and easily explore the API's data offerings, and pull in the data you need. There are other Census API wrapper libraries available for Python, and I honestly haven't assessed their capabilities more than superficially, but I like building my own tools, so here we are!\n\n`cendat` can be installed with `pip`\n\n```{bash}\npip install cendat\n```\n\nand you can also install `pandas` and/or `polars` at the same time to enable optional methods to work with acquired data\n\n```{bash}\npip install cendat[pandas]\n```\n\n```{bash}\npip install cendat[polars]\n```\n\n```{bash}\npip install cendat[all]\n```\n\nYou can check out its documentation at <https://pypi.org/project/cendat/>.\n\nYou need an API key to get the most out of `cendat`–you can get one here: <https://api.census.gov/data/key_signup.html>.\n\n## Workflow\n\n`cendat` includes two classes: `CenDatHelper` for exploring the API, locking in product, vintage, variable, and geographic selections, and getting data, and `CenDatResponse` to represent the returned data structure and provide methods for conversion to `pandas` or `polars` DataFrames.\n\nThese classes can be used if you already know exactly what you want and how to specify it, but they also streamline the process of figuring out and selecting what you want through a consistent list $\\rightarrow$ set two-step that works for products, geographies, and variables. Once selections are locked in, the `get_data()` method builds the queries, issues them concurrently, and organizes the results into a digestible format.\n\n## Step 1. Import and Instantiate\n\nA `CenDatHelper` object can be instantiated without argument, or with the `key` parameter (as shown below) and/or `years`, which can be provided as an integer or list of integers. API key and years can also be provided later via the `load_key()` and `set_years()` methods, respectively. To start exploring, we'll provide a key but not specify any years of interest.\n\n::: {#65b249b3 .cell execution_count=1}\n``` {.python .cell-code}\nfrom cendat import CenDatHelper\nfrom dotenv import load_dotenv\nimport os\nfrom pprint import pprint\nimport polars as pl\nload_dotenv()\n\ncdh = CenDatHelper(key=os.getenv('CENSUS_API_KEY'))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n✅ API key loaded successfully.\n```\n:::\n:::\n\n\n## Step 2. Explore Available Products\n\n`cendat` (currently, as of ver. 0.2.2) supports all aggregate and microdata products available in the API (I'm open to adding timeseries product handling as well, if anyone requests it). To explore those products, we use the `list_products()` method. Let's start by looking for anything related to the ACS 5-year detailed tables.\n\n::: {#3f6cd55a .cell results='markup' execution_count=2}\n``` {.python .cell-code}\npotential_products = cdh.list_products(\n    patterns=[\"acs\", \"5-year\", \"detailed\"]\n)\n\nfor product in potential_products:\n    print(product['title'])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAmerican Community Survey: 5-Year Estimates: Detailed Tables 5-Year (2009/acs/acs5)\nAmerican Community Survey: 5-Year Estimates: American Indian and Alaska Native Detailed Tables 5-Year (2010/acs/acs5/aian)\nACS 5-Year Detailed Tables (2010/acs/acs5)\nAmerican Community Survey: 5-Year Estimates: Selected Population Detailed Tables 5-Year (2010/acs/acs5/spt)\nACS 5-Year Detailed Tables (2011/acs/acs5)\nACS 5-Year Detailed Tables (2012/acs/acs5)\nACS 5-Year Detailed Tables (2013/acs/acs5)\nACS 5-Year Detailed Tables (2014/acs/acs5)\nACS 5-Year AIAN Detailed Tables (2015/acs/acs5/aian)\nACS 5-Year Detailed Tables (2015/acs/acs5)\nAmerican Community Survey: 5-Year Estimates: Selected Population Detailed Tables 5-Year (2015/acs/acs5/spt)\nACS 5-Year Detailed Tables (2016/acs/acs5)\nACS 5-Year Detailed Tables (2017/acs/acs5)\nAmerican Community Survey: 5-Year Estimates: Detailed Tables 5-Year (2018/acs/acs5)\nAmerican Community Survey: 5-Year Estimates: Detailed Tables 5-Year (2019/acs/acs5)\nAmerican Community Survey: 5-Year Estimates: Detailed Tables 5-Year (2020/acs/acs5)\nAmerican Community Survey: 5-Year Estimates: American Indian and Alaska Native Detailed Tables 5-Year (2021/acs/acs5/aian)\nAmerican Community Survey: 5-Year Estimates: Detailed Tables 5-Year (2021/acs/acs5)\nAmerican Community Survey: 5-Year Estimates: Selected Population Detailed Tables 5-Year (2021/acs/acs5/spt)\nAmerican Community Survey: 5-Year Estimates: Detailed Tables 5-Year (2022/acs/acs5)\nACS 5-Year Detailed Tables (2023/acs/acs5)\n```\n:::\n:::\n\n\nOkay, that gives us a good starting point. We'll get to filtering those results down in a moment, but first I want to highlight a couple of things about the code block above. First, you'll notice that I provided patterns to filter the products by via the `patterns` parameter. `patterns` takes a string or list of strings compiled into (case-insensitive) regular expressions. We can control whether the patterns all have to be met (the default) or only one or more through the `logic` parameter. To employ `any` logic set `logic=any`. If you don't speak regex, fear not--just supply substrings you'd like to match. We can also control which portion of the metadata the patterns will be used on. The default (which we've used here) is to operate on the titles. The alternative is to operate on the descriptions, which can be achieved by setting `match_in='desc'`. One other point. You'll notice that I selectively printed only `product['title']`. By default, the `list_products()` method returns a list of dictionaries of which the title is only one item (we can force it to return only the title by setting `to_dicts=False`). We'll see some more of what's returned after we filter our products down a bit more.\n\nOkay, back to the results. A couple of things are obvious: the detailed tables products aren't named consistently across years, and there are some special population products that are being picked up as well. We can also see that there's a parenthetical portion to each product title that looks like a directory path--that's parsed from the JSON packet returned by the API and tacked on by `list_products()`. So, rather than trying to refine our patterns to capture the inconsistent portion of the titles, we can focus on that and try again.\n\n::: {#8ba34911 .cell results='markup' execution_count=3}\n``` {.python .cell-code}\npotential_products = cdh.list_products(\n    patterns=[r\"acs/acs5\\)\"]\n)\n\nfor product in potential_products:\n    print(product['title'])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAmerican Community Survey: 5-Year Estimates: Detailed Tables 5-Year (2009/acs/acs5)\nACS 5-Year Detailed Tables (2010/acs/acs5)\nACS 5-Year Detailed Tables (2011/acs/acs5)\nACS 5-Year Detailed Tables (2012/acs/acs5)\nACS 5-Year Detailed Tables (2013/acs/acs5)\nACS 5-Year Detailed Tables (2014/acs/acs5)\nACS 5-Year Detailed Tables (2015/acs/acs5)\nACS 5-Year Detailed Tables (2016/acs/acs5)\nACS 5-Year Detailed Tables (2017/acs/acs5)\nAmerican Community Survey: 5-Year Estimates: Detailed Tables 5-Year (2018/acs/acs5)\nAmerican Community Survey: 5-Year Estimates: Detailed Tables 5-Year (2019/acs/acs5)\nAmerican Community Survey: 5-Year Estimates: Detailed Tables 5-Year (2020/acs/acs5)\nAmerican Community Survey: 5-Year Estimates: Detailed Tables 5-Year (2021/acs/acs5)\nAmerican Community Survey: 5-Year Estimates: Detailed Tables 5-Year (2022/acs/acs5)\nACS 5-Year Detailed Tables (2023/acs/acs5)\n```\n:::\n:::\n\n\nNow we've filtered down to the core product we want, but let's subset to only a couple years to keep things simple. We'll also take a look at the full contents of the products' dictionaries.\n\n::: {#e12a5362 .cell results='markup' execution_count=4}\n``` {.python .cell-code}\npotential_products = cdh.list_products(\n    patterns=[r\"acs/acs5\\)\"],\n    years=[2022, 2023]\n)\n\nfor product in potential_products:\n    pprint(product)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'desc': 'The American Community Survey (ACS) is an ongoing survey that '\n         'provides data every year -- giving communities the current '\n         'information they need to plan investments and services. The ACS '\n         'covers a broad range of topics about social, economic, demographic, '\n         'and housing characteristics of the U.S. population. Summary files '\n         'include the following geographies: nation, all states (including DC '\n         'and Puerto Rico), all metropolitan areas, all congressional '\n         'districts, all counties, all places, and all tracts and block '\n         'groups. Summary files contain the most detailed cross-tabulations, '\n         'many of which are published down to block groups. The data are '\n         'population and housing counts. There are over 64,000 variables in '\n         'this dataset.',\n 'is_aggregate': True,\n 'is_microdata': False,\n 'title': 'American Community Survey: 5-Year Estimates: Detailed Tables 5-Year '\n          '(2022/acs/acs5)',\n 'type': 'acs/acs5',\n 'url': 'http://api.census.gov/data/2022/acs/acs5',\n 'vintage': [2022]}\n{'desc': 'The American Community Survey (ACS) is an ongoing survey that '\n         'provides data every year -- giving communities the current '\n         'information they need to plan investments and services. The ACS '\n         'covers a broad range of topics about social, economic, demographic, '\n         'and housing characteristics of the U.S. population. Summary files '\n         'include the following geographies: nation, all states (including DC '\n         'and Puerto Rico), all metropolitan areas, all congressional '\n         'districts, all counties, all places, and all tracts and block '\n         'groups. Summary files contain the most detailed cross-tabulations, '\n         'many of which are published down to block groups. The data are '\n         'population and housing counts. There are over 64,000 variables in '\n         'this dataset.',\n 'is_aggregate': True,\n 'is_microdata': False,\n 'title': 'ACS 5-Year Detailed Tables (2023/acs/acs5)',\n 'type': 'acs/acs5',\n 'url': 'http://api.census.gov/data/2023/acs/acs5',\n 'vintage': [2023]}\n```\n:::\n:::\n\n\nOkay, great--now we've got what we want, let's lock in our selection.\n\n::: {#e5c8daf0 .cell results='markup' execution_count=5}\n``` {.python .cell-code}\ncdh.set_products()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n✅ Product set: 'American Community Survey: 5-Year Estimates: Detailed Tables 5-Year (2022/acs/acs5)' (Vintage: [2022])\n✅ Product set: 'ACS 5-Year Detailed Tables (2023/acs/acs5)' (Vintage: [2023])\n```\n:::\n:::\n\n\n## Step 3. Explore Variables\n\nNow, let's start to think about which variables we want--according to the descriptions above, we have over 64,000 to choose from! Let's assume we're interested in median household income and average household size. We'll start by printing out the full dictionary for only the first variable, just to get a sense of the information available to us.\n\n::: {#df127a41 .cell results='markup' execution_count=6}\n``` {.python .cell-code}\npotential_variables = cdh.list_variables(\n    patterns=[\"median household income\", \"household size\"],\n    logic=any\n)\n\n# look at the first to get a sense of what the full dictionaries have to offer\npprint(potential_variables[0])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'concept': 'Average Household Size of Occupied Housing Units by Tenure '\n            '(Hispanic or Latino Householder)',\n 'group': 'B25010I',\n 'label': 'Estimate!!Average household size --!!Total:!!Owner occupied',\n 'name': 'B25010I_002E',\n 'product': 'American Community Survey: 5-Year Estimates: Detailed Tables '\n            '5-Year (2022/acs/acs5)',\n 'sugg_wgt': 'N/A',\n 'type': 'float',\n 'url': 'http://api.census.gov/data/2022/acs/acs5',\n 'values': 'N/A',\n 'vintage': [2022]}\n```\n:::\n:::\n\n\nWhen comparing the full dictionary of the first variable to just its label, we can see that there are nuances not captured in the label alone. When we print out the name and label for all found variables, we can see there is duplication in the label due to the lost nuance.\n\n::: {#5e140b5d .cell results='markup' execution_count=7}\n``` {.python .cell-code}\n# print only the titles for all of the variables\nfor variable in potential_variables:\n    print(variable['name'], variable['label'])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nB25010I_002E Estimate!!Average household size --!!Total:!!Owner occupied\nB25010I_001E Estimate!!Average household size --!!Total:\nB25010I_003E Estimate!!Average household size --!!Total:!!Renter occupied\nB25010_003E Estimate!!Average household size --!!Total:!!Renter occupied\nB25010_002E Estimate!!Average household size --!!Total:!!Owner occupied\nB25010_001E Estimate!!Average household size --!!Total:\nB19013E_001E Estimate!!Median household income in the past 12 months (in 2022 inflation-adjusted dollars)\nB19013D_001E Estimate!!Median household income in the past 12 months (in 2022 inflation-adjusted dollars)\nB22008_002E Estimate!!Median household income in the past 12 months (in 2022 inflation-adjusted dollars)--!!Total:!!Household received Food Stamps/SNAP in the past 12 months\nB22008_001E Estimate!!Median household income in the past 12 months (in 2022 inflation-adjusted dollars)--!!Total:\nB19013I_001E Estimate!!Median household income in the past 12 months (in 2022 inflation-adjusted dollars)\nB22008_003E Estimate!!Median household income in the past 12 months (in 2022 inflation-adjusted dollars)--!!Total:!!Household did not receive Food Stamps/SNAP in the past 12 months\nB25010D_003E Estimate!!Average household size --!!Total:!!Renter occupied\nB25010D_002E Estimate!!Average household size --!!Total:!!Owner occupied\nB25010D_001E Estimate!!Average household size --!!Total:\nB19013A_001E Estimate!!Median household income in the past 12 months (in 2022 inflation-adjusted dollars)\nB19013F_001E Estimate!!Median household income in the past 12 months (in 2022 inflation-adjusted dollars)\nB25010F_001E Estimate!!Average household size --!!Total:\nB25010F_002E Estimate!!Average household size --!!Total:!!Owner occupied\nB25010F_003E Estimate!!Average household size --!!Total:!!Renter occupied\nB25010A_001E Estimate!!Average household size --!!Total:\nB25010A_002E Estimate!!Average household size --!!Total:!!Owner occupied\nB25010A_003E Estimate!!Average household size --!!Total:!!Renter occupied\nB25010E_003E Estimate!!Average household size --!!Total:!!Renter occupied\nB25010E_001E Estimate!!Average household size --!!Total:\nB25010E_002E Estimate!!Average household size --!!Total:!!Owner occupied\nB25119_002E Estimate!!Median household income in the past 12 months (in 2022 inflation-adjusted dollars) --!!Total:!!Owner occupied (dollars)\nB25119_001E Estimate!!Median household income in the past 12 months (in 2022 inflation-adjusted dollars) --!!Total:\nB25119_003E Estimate!!Median household income in the past 12 months (in 2022 inflation-adjusted dollars) --!!Total:!!Renter occupied (dollars)\nB19013G_001E Estimate!!Median household income in the past 12 months (in 2022 inflation-adjusted dollars)\nB25010B_001E Estimate!!Average household size --!!Total:\nB25010B_003E Estimate!!Average household size --!!Total:!!Renter occupied\nB25010B_002E Estimate!!Average household size --!!Total:!!Owner occupied\nB25099_003E Estimate!!Median household income --!!Total:!!Median household income for units without a mortgage\nB25099_001E Estimate!!Median household income --!!Total:\nB25099_002E Estimate!!Median household income --!!Total:!!Median household income for units with a mortgage\nB25010G_003E Estimate!!Average household size --!!Total:!!Renter occupied\nB25010G_002E Estimate!!Average household size --!!Total:!!Owner occupied\nB25010G_001E Estimate!!Average household size --!!Total:\nB19013B_001E Estimate!!Median household income in the past 12 months (in 2022 inflation-adjusted dollars)\nB25010H_003E Estimate!!Average household size --!!Total:!!Renter occupied\nB25010H_002E Estimate!!Average household size --!!Total:!!Owner occupied\nB25010H_001E Estimate!!Average household size --!!Total:\nB29004_001E Estimate!!Median household income in the past 12 months (in 2022 inflation-adjusted dollars)\nB19049_004E Estimate!!Median household income in the past 12 months (in 2022 inflation-adjusted dollars) --!!Total:!!Householder 45 to 64 years\nB19049_005E Estimate!!Median household income in the past 12 months (in 2022 inflation-adjusted dollars) --!!Total:!!Householder 65 years and over\nB19049_002E Estimate!!Median household income in the past 12 months (in 2022 inflation-adjusted dollars) --!!Total:!!Householder under 25 years\nB19049_003E Estimate!!Median household income in the past 12 months (in 2022 inflation-adjusted dollars) --!!Total:!!Householder 25 to 44 years\nB19049_001E Estimate!!Median household income in the past 12 months (in 2022 inflation-adjusted dollars) --!!Total:\nB19013C_001E Estimate!!Median household income in the past 12 months (in 2022 inflation-adjusted dollars)\nB19013_001E Estimate!!Median household income in the past 12 months (in 2022 inflation-adjusted dollars)\nB25010C_002E Estimate!!Average household size --!!Total:!!Owner occupied\nB25010C_001E Estimate!!Average household size --!!Total:\nB25010C_003E Estimate!!Average household size --!!Total:!!Renter occupied\nB19013H_001E Estimate!!Median household income in the past 12 months (in 2022 inflation-adjusted dollars)\nB25010I_002E Estimate!!Average household size --!!Total:!!Owner occupied\nB25010I_001E Estimate!!Average household size --!!Total:\nB25010I_003E Estimate!!Average household size --!!Total:!!Renter occupied\nB25010_003E Estimate!!Average household size --!!Total:!!Renter occupied\nB25010_002E Estimate!!Average household size --!!Total:!!Owner occupied\nB25010_001E Estimate!!Average household size --!!Total:\nB19013E_001E Estimate!!Median household income in the past 12 months (in 2023 inflation-adjusted dollars)\nB19013D_001E Estimate!!Median household income in the past 12 months (in 2023 inflation-adjusted dollars)\nB22008_002E Estimate!!Median household income in the past 12 months (in 2023 inflation-adjusted dollars)--!!Total:!!Household received Food Stamps/SNAP in the past 12 months\nB22008_001E Estimate!!Median household income in the past 12 months (in 2023 inflation-adjusted dollars)--!!Total:\nB19013I_001E Estimate!!Median household income in the past 12 months (in 2023 inflation-adjusted dollars)\nB22008_003E Estimate!!Median household income in the past 12 months (in 2023 inflation-adjusted dollars)--!!Total:!!Household did not receive Food Stamps/SNAP in the past 12 months\nB25010D_003E Estimate!!Average household size --!!Total:!!Renter occupied\nB25010D_002E Estimate!!Average household size --!!Total:!!Owner occupied\nB25010D_001E Estimate!!Average household size --!!Total:\nB19013A_001E Estimate!!Median household income in the past 12 months (in 2023 inflation-adjusted dollars)\nB19013F_001E Estimate!!Median household income in the past 12 months (in 2023 inflation-adjusted dollars)\nB25010F_001E Estimate!!Average household size --!!Total:\nB25010F_002E Estimate!!Average household size --!!Total:!!Owner occupied\nB25010F_003E Estimate!!Average household size --!!Total:!!Renter occupied\nB25010A_001E Estimate!!Average household size --!!Total:\nB25010A_002E Estimate!!Average household size --!!Total:!!Owner occupied\nB25010A_003E Estimate!!Average household size --!!Total:!!Renter occupied\nB25010E_003E Estimate!!Average household size --!!Total:!!Renter occupied\nB25010E_001E Estimate!!Average household size --!!Total:\nB25010E_002E Estimate!!Average household size --!!Total:!!Owner occupied\nB25119_002E Estimate!!Median household income in the past 12 months (in 2023 inflation-adjusted dollars) --!!Total:!!Owner occupied (dollars)\nB25119_001E Estimate!!Median household income in the past 12 months (in 2023 inflation-adjusted dollars) --!!Total:\nB25119_003E Estimate!!Median household income in the past 12 months (in 2023 inflation-adjusted dollars) --!!Total:!!Renter occupied (dollars)\nB19013G_001E Estimate!!Median household income in the past 12 months (in 2023 inflation-adjusted dollars)\nB25010B_001E Estimate!!Average household size --!!Total:\nB25010B_003E Estimate!!Average household size --!!Total:!!Renter occupied\nB25010B_002E Estimate!!Average household size --!!Total:!!Owner occupied\nB25099_003E Estimate!!Median household income --!!Total:!!Median household income for units without a mortgage\nB25099_001E Estimate!!Median household income --!!Total:\nB25099_002E Estimate!!Median household income --!!Total:!!Median household income for units with a mortgage\nB25010G_003E Estimate!!Average household size --!!Total:!!Renter occupied\nB25010G_002E Estimate!!Average household size --!!Total:!!Owner occupied\nB25010G_001E Estimate!!Average household size --!!Total:\nB19013B_001E Estimate!!Median household income in the past 12 months (in 2023 inflation-adjusted dollars)\nB25010H_003E Estimate!!Average household size --!!Total:!!Renter occupied\nB25010H_002E Estimate!!Average household size --!!Total:!!Owner occupied\nB25010H_001E Estimate!!Average household size --!!Total:\nB29004_001E Estimate!!Median household income in the past 12 months (in 2023 inflation-adjusted dollars)\nB19049_004E Estimate!!Median household income in the past 12 months (in 2023 inflation-adjusted dollars) --!!Total:!!Householder 45 to 64 years\nB19049_005E Estimate!!Median household income in the past 12 months (in 2023 inflation-adjusted dollars) --!!Total:!!Householder 65 years and over\nB19049_002E Estimate!!Median household income in the past 12 months (in 2023 inflation-adjusted dollars) --!!Total:!!Householder under 25 years\nB19049_003E Estimate!!Median household income in the past 12 months (in 2023 inflation-adjusted dollars) --!!Total:!!Householder 25 to 44 years\nB19049_001E Estimate!!Median household income in the past 12 months (in 2023 inflation-adjusted dollars) --!!Total:\nB19013C_001E Estimate!!Median household income in the past 12 months (in 2023 inflation-adjusted dollars)\nB19013_001E Estimate!!Median household income in the past 12 months (in 2023 inflation-adjusted dollars)\nB25010C_002E Estimate!!Average household size --!!Total:!!Owner occupied\nB25010C_001E Estimate!!Average household size --!!Total:\nB25010C_003E Estimate!!Average household size --!!Total:!!Renter occupied\nB19013H_001E Estimate!!Median household income in the past 12 months (in 2023 inflation-adjusted dollars)\n```\n:::\n:::\n\n\nIn our next pass we'll filter to promising variables based on label, but we'll print the variable name and concept, as that seems to capture the nuance we need to be aware of.\n\n::: {#879289cb .cell results='markup' execution_count=8}\n``` {.python .cell-code}\npotential_variables = cdh.list_variables(\n    patterns=[\n        r\"Average household size --!!Total:$\",\n        r\"Median household income in the past 12 months \\(in 202\\d inflation-adjusted dollars\\)$\"\n    ],\n    logic=any\n)\n\nfor variable in potential_variables:\n    print(variable['name'], \"\\n\", variable['concept'])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nB25010I_001E \n Average Household Size of Occupied Housing Units by Tenure (Hispanic or Latino Householder)\nB25010_001E \n Average Household Size of Occupied Housing Units by Tenure\nB19013E_001E \n Median Household Income in the Past 12 Months (in 2022 Inflation-Adjusted Dollars) (Native Hawaiian and Other Pacific Islander Alone Householder)\nB19013D_001E \n Median Household Income in the Past 12 Months (in 2022 Inflation-Adjusted Dollars) (Asian Alone Householder)\nB19013I_001E \n Median Household Income in the Past 12 Months (in 2022 Inflation-Adjusted Dollars) (Hispanic or Latino Householder)\nB25010D_001E \n Average Household Size of Occupied Housing Units by Tenure (Asian Alone Householder)\nB19013A_001E \n Median Household Income in the Past 12 Months (in 2022 Inflation-Adjusted Dollars) (White Alone Householder)\nB19013F_001E \n Median Household Income in the Past 12 Months (in 2022 Inflation-Adjusted Dollars) (Some Other Race Alone Householder)\nB25010F_001E \n Average Household Size of Occupied Housing Units by Tenure (Some Other Race Alone Householder)\nB25010A_001E \n Average Household Size of Occupied Housing Units by Tenure (White Alone Householder)\nB25010E_001E \n Average Household Size of Occupied Housing Units by Tenure (Native Hawaiian and Other Pacific Islander Alone Householder)\nB19013G_001E \n Median Household Income in the Past 12 Months (in 2022 Inflation-Adjusted Dollars) (Two or More Races Householder)\nB25010B_001E \n Average Household Size of Occupied Housing Units by Tenure (Black or African American Alone Householder)\nB25010G_001E \n Average Household Size of Occupied Housing Units by Tenure (Two or More Races Householder)\nB19013B_001E \n Median Household Income in the Past 12 Months (in 2022 Inflation-Adjusted Dollars) (Black or African American Alone Householder)\nB25010H_001E \n Average Household Size of Occupied Housing Units by Tenure (White Alone, Not Hispanic or Latino Householder)\nB29004_001E \n Median Household Income for Households With a Citizen, Voting-Age Householder (in 2022 Inflation-Adjusted Dollars)\nB19013C_001E \n Median Household Income in the Past 12 Months (in 2022 Inflation-Adjusted Dollars) (American Indian and Alaska Native Alone Householder)\nB19013_001E \n Median Household Income in the Past 12 Months (in 2022 Inflation-Adjusted Dollars)\nB25010C_001E \n Average Household Size of Occupied Housing Units by Tenure (American Indian and Alaska Native Alone Householder)\nB19013H_001E \n Median Household Income in the Past 12 Months (in 2022 Inflation-Adjusted Dollars) (White Alone, Not Hispanic or Latino Householder)\nB25010I_001E \n Average Household Size of Occupied Housing Units by Tenure (Hispanic or Latino Householder)\nB25010_001E \n Average Household Size of Occupied Housing Units by Tenure\nB19013E_001E \n Median Household Income in the Past 12 Months (in 2023 Inflation-Adjusted Dollars) (Native Hawaiian and Other Pacific Islander Alone Householder)\nB19013D_001E \n Median Household Income in the Past 12 Months (in 2023 Inflation-Adjusted Dollars) (Asian Alone Householder)\nB19013I_001E \n Median Household Income in the Past 12 Months (in 2023 Inflation-Adjusted Dollars) (Hispanic or Latino Householder)\nB25010D_001E \n Average Household Size of Occupied Housing Units by Tenure (Asian Alone Householder)\nB19013A_001E \n Median Household Income in the Past 12 Months (in 2023 Inflation-Adjusted Dollars) (White Alone Householder)\nB19013F_001E \n Median Household Income in the Past 12 Months (in 2023 Inflation-Adjusted Dollars) (Some Other Race Alone Householder)\nB25010F_001E \n Average Household Size of Occupied Housing Units by Tenure (Some Other Race Alone Householder)\nB25010A_001E \n Average Household Size of Occupied Housing Units by Tenure (White Alone Householder)\nB25010E_001E \n Average Household Size of Occupied Housing Units by Tenure (Native Hawaiian and Other Pacific Islander Alone Householder)\nB19013G_001E \n Median Household Income in the Past 12 Months (in 2023 Inflation-Adjusted Dollars) (Two or More Races Householder)\nB25010B_001E \n Average Household Size of Occupied Housing Units by Tenure (Black or African American Alone Householder)\nB25010G_001E \n Average Household Size of Occupied Housing Units by Tenure (Two or More Races Householder)\nB19013B_001E \n Median Household Income in the Past 12 Months (in 2023 Inflation-Adjusted Dollars) (Black or African American Alone Householder)\nB25010H_001E \n Average Household Size of Occupied Housing Units by Tenure (White Alone, Not Hispanic or Latino Householder)\nB29004_001E \n Median Household Income for Households With a Citizen, Voting-Age Householder (in 2023 Inflation-Adjusted Dollars)\nB19013C_001E \n Median Household Income in the Past 12 Months (in 2023 Inflation-Adjusted Dollars) (American Indian and Alaska Native Alone Householder)\nB19013_001E \n Median Household Income in the Past 12 Months (in 2023 Inflation-Adjusted Dollars)\nB25010C_001E \n Average Household Size of Occupied Housing Units by Tenure (American Indian and Alaska Native Alone Householder)\nB19013H_001E \n Median Household Income in the Past 12 Months (in 2023 Inflation-Adjusted Dollars) (White Alone, Not Hispanic or Latino Householder)\n```\n:::\n:::\n\n\nBased on this output we can see that we're interested in `B25010_001E` and `B19013_001E`--we can set these variables explicitly.\n\n::: {#2c8fe18f .cell results='markup' execution_count=9}\n``` {.python .cell-code}\ncdh.set_variables(\n    names=[\"B25010_001E\", \"B19013_001E\"]\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n✅ Variables set:\n  - Product: American Community Survey: 5-Year Estimates: Detailed Tables 5-Year (2022/acs/acs5) (Vintage: [2022])\n    Variables: B25010_001E, B19013_001E\n  - Product: ACS 5-Year Detailed Tables (2023/acs/acs5) (Vintage: [2023])\n    Variables: B25010_001E, B19013_001E\n```\n:::\n:::\n\n\n## Step 4. Explore Geographic Summary Levels\n\nNext we need to select the geographic level at which we want to get our estimates. Let's assume we're interested in block groups and filter accordingly. That should give us a small number of options, so we'll output and view the complete dictionaries.\n\n::: {#aab7d0b7 .cell results='markup' execution_count=10}\n``` {.python .cell-code}\npotential_geos = cdh.list_geos(\n    patterns=\"block group\",\n    to_dicts=True\n)\n\npprint(potential_geos)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[{'desc': 'block group',\n  'optionalWithWCFor': 'tract',\n  'product': 'American Community Survey: 5-Year Estimates: Detailed Tables '\n             '5-Year (2022/acs/acs5)',\n  'requires': ['state', 'county', 'tract'],\n  'sumlev': '150',\n  'url': 'http://api.census.gov/data/2022/acs/acs5',\n  'vintage': [2022],\n  'wildcard': ['county', 'tract']},\n {'desc': 'tribal block group',\n  'optionalWithWCFor': None,\n  'product': 'American Community Survey: 5-Year Estimates: Detailed Tables '\n             '5-Year (2022/acs/acs5)',\n  'requires': ['american indian area/alaska native area/hawaiian home land',\n               'tribal census tract'],\n  'sumlev': '258',\n  'url': 'http://api.census.gov/data/2022/acs/acs5',\n  'vintage': [2022],\n  'wildcard': None},\n {'desc': 'tribal block group (or part)',\n  'optionalWithWCFor': None,\n  'product': 'American Community Survey: 5-Year Estimates: Detailed Tables '\n             '5-Year (2022/acs/acs5)',\n  'requires': ['american indian area/alaska native area (reservation or '\n               'statistical entity only)',\n               'tribal census tract (or part)'],\n  'sumlev': '293',\n  'url': 'http://api.census.gov/data/2022/acs/acs5',\n  'vintage': [2022],\n  'wildcard': None},\n {'desc': 'tribal block group (or part)',\n  'optionalWithWCFor': None,\n  'product': 'American Community Survey: 5-Year Estimates: Detailed Tables '\n             '5-Year (2022/acs/acs5)',\n  'requires': ['american indian area (off-reservation trust land '\n               'only)/hawaiian home land',\n               'tribal census tract (or part)'],\n  'sumlev': '294',\n  'url': 'http://api.census.gov/data/2022/acs/acs5',\n  'vintage': [2022],\n  'wildcard': None},\n {'desc': 'block group',\n  'optionalWithWCFor': 'tract',\n  'product': 'ACS 5-Year Detailed Tables (2023/acs/acs5)',\n  'requires': ['state', 'county', 'tract'],\n  'sumlev': '150',\n  'url': 'http://api.census.gov/data/2023/acs/acs5',\n  'vintage': [2023],\n  'wildcard': ['county', 'tract']},\n {'desc': 'tribal block group',\n  'optionalWithWCFor': None,\n  'product': 'ACS 5-Year Detailed Tables (2023/acs/acs5)',\n  'requires': ['american indian area/alaska native area/hawaiian home land',\n               'tribal census tract'],\n  'sumlev': '258',\n  'url': 'http://api.census.gov/data/2023/acs/acs5',\n  'vintage': [2023],\n  'wildcard': None},\n {'desc': 'tribal block group (or part)',\n  'optionalWithWCFor': None,\n  'product': 'ACS 5-Year Detailed Tables (2023/acs/acs5)',\n  'requires': ['american indian area/alaska native area (reservation or '\n               'statistical entity only)',\n               'tribal census tract (or part)'],\n  'sumlev': '293',\n  'url': 'http://api.census.gov/data/2023/acs/acs5',\n  'vintage': [2023],\n  'wildcard': None},\n {'desc': 'tribal block group (or part)',\n  'optionalWithWCFor': None,\n  'product': 'ACS 5-Year Detailed Tables (2023/acs/acs5)',\n  'requires': ['american indian area (off-reservation trust land '\n               'only)/hawaiian home land',\n               'tribal census tract (or part)'],\n  'sumlev': '294',\n  'url': 'http://api.census.gov/data/2023/acs/acs5',\n  'vintage': [2023],\n  'wildcard': None}]\n```\n:::\n:::\n\n\nA couple of things to note here. First, we can see in the first dictionary that it is the one we're interested in (summary level 150). Second, the dictionary includes `'requires': ['state', 'county', 'tract']` which indicates that in order to get estimates for a set of block groups from the API, the query must specify the parent state, county, and tract. So, we will need multiple API calls--one for every tract, each of which also has to provide a specific state and county.\n\n## Step 5. Get Data\n\nNotably, there are nearly 84,000 tracts in continental U.S.! To keep this example a little more bite-sized, we'll focus on just three counties in Colorado and the entire state of Wyoming (mostly to illustrate the flexibility we have in providing nesting information in `within`). Now, that's still a lot of tracts, but `CenDatHelper` does the hard work of figuring out all of the state-county-tract combinations and building/issuing the necessary API calls. First we set our summary level of interest, then we get the data. Let's see how that works.\n\n::: {#61bb220e .cell execution_count=11}\n``` {.python .cell-code}\n%%time\n#| results: markup\n\ncdh.set_geos(\"150\")\n\nresponse = cdh.get_data(\n    within=[\n        {\"state\": \"08\", \"county\": [\"123\", \"013\"]},\n        {\"state\": \"08\", \"county\": \"069\", \"tract\": [\"001307\", \"001810\",\"001308\"]},\n        {\"state\": \"56\"}\n    ]\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n✅ Geographies set: 'block group' (requires `within` for: county, state, tract)\n✅ Parameters created for 2 geo-variable combinations.\n✅ Found 1 combinations. Building API queries...\n✅ Found 1 combinations. Building API queries...\n✅ Found 1 combinations. Building API queries...\n✅ Found 1 combinations. Building API queries...\n✅ Found 1 combinations. Building API queries...\n✅ Found 1 combinations. Building API queries...\n✅ Found 1 combinations. Building API queries...\n✅ Found 1 combinations. Building API queries...\n✅ Found 1 combinations. Building API queries...\n✅ Found 1 combinations. Building API queries...\n✅ Found 1 combinations. Building API queries...\n✅ Found 1 combinations. Building API queries...\nℹ️ Making 12 API call(s)...\nCPU times: user 97.4 ms, sys: 26.4 ms, total: 124 ms\nWall time: 1.75 s\n```\n:::\n:::\n\n\nWe can see that in the end 648 API calls were needed to satisfy our request, but due to the wonders of thread pooling, it didn't take very long at all. Note that this example illustrates the flexibility of `within` pretty well--we can specify parent geographies as a list of dictionaries at different levels of the geographic hierarchy above the summary level of interest. Since we're pulling block groups, we can provide state, state and county, or state, county and tract. Within each dictionary, the last item's values may be provided as a list. We see that above for counties in the first dictionary and tracts in the second. Technically, any item's values can be provided as a list, we will just issue some API calls that won't work as intended (we'll get, say, counties from two different states because they have the same county code) or that won't work at all (we'll end up looking for parent geography combinations that don't exist), and we'll see messages to that effect in the output. For predictable output, it's best to stick to lists only in the last item of a given dictionary.\n\n## Step 6. Convert\n\nOur final step is to convert our output to a more friendly format.\n\n::: {#b7058a88 .cell results='markup' execution_count=12}\n``` {.python .cell-code}\ndf = pl.concat(\n        response.to_polars(\n            schema_overrides={\n                \"B25010_001E\": pl.Float64, \n                \"B19013_001E\": pl.Float64,\n            }\n    )\n)\n\nprint(df.head())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nshape: (5, 10)\n┌─────────────┬─────────────┬───────┬────────┬───┬────────────────┬─────────┬────────┬─────────────┐\n│ B25010_001E ┆ B19013_001E ┆ state ┆ county ┆ … ┆ product        ┆ vintage ┆ sumlev ┆ desc        │\n│ ---         ┆ ---         ┆ ---   ┆ ---    ┆   ┆ ---            ┆ ---     ┆ ---    ┆ ---         │\n│ f64         ┆ f64         ┆ str   ┆ str    ┆   ┆ str            ┆ i32     ┆ str    ┆ str         │\n╞═════════════╪═════════════╪═══════╪════════╪═══╪════════════════╪═════════╪════════╪═════════════╡\n│ 2.14        ┆ 143594.0    ┆ 08    ┆ 069    ┆ … ┆ American       ┆ 2022    ┆ 150    ┆ block group │\n│             ┆             ┆       ┆        ┆   ┆ Community      ┆         ┆        ┆             │\n│             ┆             ┆       ┆        ┆   ┆ Survey: 5-Y…   ┆         ┆        ┆             │\n│ 2.18        ┆ 131786.0    ┆ 08    ┆ 069    ┆ … ┆ American       ┆ 2022    ┆ 150    ┆ block group │\n│             ┆             ┆       ┆        ┆   ┆ Community      ┆         ┆        ┆             │\n│             ┆             ┆       ┆        ┆   ┆ Survey: 5-Y…   ┆         ┆        ┆             │\n│ 2.76        ┆ 82759.0     ┆ 08    ┆ 069    ┆ … ┆ American       ┆ 2022    ┆ 150    ┆ block group │\n│             ┆             ┆       ┆        ┆   ┆ Community      ┆         ┆        ┆             │\n│             ┆             ┆       ┆        ┆   ┆ Survey: 5-Y…   ┆         ┆        ┆             │\n│ 2.5         ┆ 145000.0    ┆ 08    ┆ 069    ┆ … ┆ American       ┆ 2022    ┆ 150    ┆ block group │\n│             ┆             ┆       ┆        ┆   ┆ Community      ┆         ┆        ┆             │\n│             ┆             ┆       ┆        ┆   ┆ Survey: 5-Y…   ┆         ┆        ┆             │\n│ 2.41        ┆ 87798.0     ┆ 08    ┆ 069    ┆ … ┆ American       ┆ 2022    ┆ 150    ┆ block group │\n│             ┆             ┆       ┆        ┆   ┆ Community      ┆         ┆        ┆             │\n│             ┆             ┆       ┆        ┆   ┆ Survey: 5-Y…   ┆         ┆        ┆             │\n└─────────────┴─────────────┴───────┴────────┴───┴────────────────┴─────────┴────────┴─────────────┘\n```\n:::\n:::\n\n\nHere I've chosen to convert to polars DataFrames (the response is a list with entries for each product vintage, so `to_polars()` generates a list of DataFrames - `pl.concat()` stacks them). I've also forced my estimate variables to float type, as they come from the API as strings.\n\nThat's all for now! Development is ongoing, and I plan to add new features as they occur to me. Don't hesitate to reach out of there's anything you'd like to see (or if you spot any bugs).\n\n",
    "supporting": [
      "index_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}