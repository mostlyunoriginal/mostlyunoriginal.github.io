{
  "hash": "09d299558d089d4d8f024bdcc8b76f60",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"A Quick Patch / Love Letter to Python\"\ndescription: \"In which I describe a satisfying conclusion to a recent bug\"\ndate: 2025-09-06\nauthor:\n    - name: Lance Couzens\n      url: https://mostlyunoriginal.github.io  \ncategories: [Python, cendat, Census, API]\ncitation: \n  url: https://mostlyunoriginal.github.io/posts/2025-09-06-quick-patch-python-love/\nimage: Preview.png \ndraft: false\nlightbox: true\n---\n\n# The Issue\n\nAs is often the case, I introduced a new feature to an existing codebase and thereby introduced a new bug. Some days ago now I updated my `cendat` library to allow for a shortcut in obtaining all variables in a group from the Census API. This is very handy and wonderful, but in some cases the basket of group variables includes `NAME` and `GEO_ID`, which the user separately has the option to pull. The result was that in many cases the returned JSON object contained duplication of those variables, and this could cause problems when those objects were turned into DataFrames.\n\nInitially, I thought I would just internally undo the user's variable-level requests for `NAME` and `GEO_ID` if they were doing a group-level call, but I'm just not sure that all groups will always include those variables, which would leave the user with no way to obtain them in a group call. In the end I settled on it being best to remove duplicates in the raw data before it's processed as a Polars or Pandas DataFrame. Here's an abstracted example of the issue.\n\n### Incoming Data\n\n::: {#34f1a516 .cell execution_count=1}\n``` {.python .cell-code}\nschema = [\"zero\", \"one\", \"two\", \"three\", \"two\", \"four\", \"five\", \"one\", \"six\"]\n\ndata = [\n    [0, 1, 2, 3, 2, 4, 5, 1, 6],\n    [0, 1, 2, 3, 2, 4, 5, 1, 6],\n    [0, 1, 2, 3, 2, 4, 5, 1, 6],\n]\n```\n:::\n\n\nHere we can see how the format in which the raw data are obtained: `schema` is a list of strings containing the variable names, and `data` is a list of lists, each representing a row of data. As shown here, some columns may be duplicated, and we need to identify the duplicates and remove them before processing further.\n\n### A Dictionary for Column Indexes\n\n::: {#2c77b327 .cell execution_count=2}\n``` {.python .cell-code}\nfrom collections import defaultdict\nfrom pprint import pprint\n\nindex_map = defaultdict(list)\nfor index, name in enumerate(schema):\n    index_map[name].append(index)\n\npprint(f\"{index_map=}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(\"index_map=defaultdict(<class 'list'>, {'zero': [0], 'one': [1, 7], 'two': \"\n \"[2, 4], 'three': [3], 'four': [5], 'five': [6], 'six': [8]})\")\n```\n:::\n:::\n\n\nThe first step is to create the dictionary `index_map` which we instantiate with `defaultdict` so we can default each item to contain list values. We then enumerate over the `schema` list to build out the dictionary's items with keys being the unique variable names and the values being each index in which they are found. Variables that occur only once in `schema` will have index lists of length 1, while those that are duplicated will have multiple entries in their index lists.\n\n### A Set of Indexes Marked for Removal\n\nNext, we create the set `removals` to contain the indexes where extra occurrences of variables can be found in the data rows. Since we know the indexes will be unique, we can utilize a set for maximum efficiency.\n\n::: {#25ec2ff8 .cell execution_count=3}\n``` {.python .cell-code}\nremovals = set()\nfor indexes in index_map.values():\n    if len(indexes) > 1:\n        removals.update(indexes[1:])\n\npprint(f\"{removals=}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'removals={4, 7}'\n```\n:::\n:::\n\n\n### Updated Data Rows\n\nNow we have everything we need to update the raw data before we attempt to process it. We update both the schema and data rows via list comprehension.\n\n::: {#115c99b7 .cell execution_count=4}\n``` {.python .cell-code}\nnew_schema = [var for i, var in enumerate(schema) if i not in removals]\nnew_data = [\n    [datum for i, datum in enumerate(row) if i not in removals] \n    for row in data\n]\n\npprint(f\"{new_schema=}\")\npprint(f\"{new_data=}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\"new_schema=['zero', 'one', 'two', 'three', 'four', 'five', 'six']\"\n'new_data=[[0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6]]'\n```\n:::\n:::\n\n\nI found this solution both very satisfying and a nice, compact example of why I really like Python: you've got a nice variety of useful collection types to work with (here we used lists, dictionaries, and sets) and syntactic constructs like comprehensions to easily and conditionally manipulate them.\n\n",
    "supporting": [
      "index_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}