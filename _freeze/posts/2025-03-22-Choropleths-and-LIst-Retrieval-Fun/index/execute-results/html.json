{
  "hash": "77efed4a9464a74e6599fd09aff34de0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Building and Working with a List of ggplot Objects in R\"\ndescription: \"Here we make a list of choropleth maps\"\ndate: 2025-03-22\nauthor:\n    - name: Lance Couzens\n      url: https://mostlyunoriginal.github.io  \ncategories: [R, Graphics, Lists, Census API]\ncitation: \n  url: https://mostlyunoriginal.github.io/posts/2025-03-22-Choropleths-and-LIst-Retrieval-Fun/\nimage: pReview.png\nlightbox: true\ndraft: false\n---\n\n\n\nLists are, in many ways, R's most powerful objects. They are vectors without type, general and flexible. You can fill them with anything---including other lists---and while this enables some truly useful complexity in our R-based processes, it can also make creating and working with lists daunting, especially for newer R programmers.\n\nWith this post I make no attempt to explain (let alone *fully explain*) lists in R. Instead I just hope to showcase one example of doing something fun (and maybe kinda useful-ish?) with them: storing and retrieving income disparity choropleth maps made with the Census API and `ggplot2`. Everyone loves maps, right?!\n\nHere's what we'll do:\n\n1.  retrieve a state-level data frame with 2023 ACS 5-year poverty estimates via the Census API\n2.  create the recode variable `prop_below` that represents the proportion of the state population with household income below the poverty limit\n3.  sort in descending order by `prop_below`\n4.  using the resulting data frame as a parameter file, iterate a custom function that\n    1.  retrieves county-level median income estimates and polygons for a given state via the Census API\n    2.  ranks the counties by their median income\n    3.  generates clean labels for the top and bottom counties\n    4.  creates a plot object containing the county choropleth map for the state\n    5.  returns a list containing the plot, the state abbreviation, and the state name\n\nAt this point, we will have a list with 50 elements—one for each state—each of which is a list containing the state-level plots plus state names and abbreviations. We will explore three ways to extract plots from this list.\n\n\n\n::: {.cell}\n\n:::\n\n\n\nFirst, we'll load the necessary libraries and create our state-level parameter file.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidycensus)\nlibrary(tidyverse)\nlibrary(viridis)\nlibrary(ggplot2)\nlibrary(scales)\n\nyear<-2023\n\npoverty_data<-get_acs(\n  geography=\"state\"\n  ,variables=c(\n      below_p5pov=\"C17002_002\"\n      ,p5_1pov=\"C17002_003\"\n      ,total_population=\"C17002_001\"\n  )\n  ,year=year\n  ,survey=\"acs5\"\n) %>%\n  pivot_wider(\n    id_cols=c(GEOID,NAME)\n    ,names_from=\"variable\"\n    ,values_from=\"estimate\"\n  ) %>%\n  filter(!GEOID %in% c(72,11)) %>%\n  mutate(\n    prop_below=(below_p5pov+p5_1pov)/total_population\n    ,year=.env$year\n  ) %>%\n  arrange(desc(prop_below))\n```\n:::\n\n\n\nLet's look at the parameter file to see what our functional process has to work with.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npoverty_data\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 50 × 7\n   GEOID NAME           total_population below_p5pov p5_1pov prop_below  year\n   <chr> <chr>                     <dbl>       <dbl>   <dbl>      <dbl> <dbl>\n 1 28    Mississippi             2851847      244374  299323      0.191  2023\n 2 22    Louisiana               4494539      390425  458344      0.189  2023\n 3 35    New Mexico              2073857      174355  201026      0.181  2023\n 4 54    West Virginia           1728580      131400  156260      0.166  2023\n 5 21    Kentucky                4382816      325901  381579      0.161  2023\n 6 05    Arkansas                2944742      209434  262349      0.160  2023\n 7 01    Alabama                 4913932      352821  415364      0.156  2023\n 8 40    Oklahoma                3872738      276048  317772      0.153  2023\n 9 45    South Carolina          5072217      340381  379339      0.142  2023\n10 48    Texas                  29016925     1845809 2159608      0.138  2023\n# ℹ 40 more rows\n```\n\n\n:::\n:::\n\n\n\nAnd here we fill our list: `maplist`. To do that, we iterate over our parameter file with the `pmap()` functional and an anonymous function containing the guts of our process.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmaplist<-poverty_data %>%\n  pmap( #use pmap so we can provide df as parameter file\n    \n    function(...){ #function takes in all variables in df because of dots param\n      \n      parms<-rlang::list2(...) #extract all var values for current iteration into named list\n      \n      #save plot to p\n      p<-get_acs( #api call returns county-level data with polygons\n        geography=\"county\"\n        ,variables=\"B19013_001\" #median income\n        ,state=parms$GEOID #note use of parms list\n        ,geometry=TRUE #include polygons\n        ,year=parms$year #again here\n      ) %>%\n        mutate(\n          goodlabel=case_when(\n            rank(estimate,na.last=NA,ties.method=\"first\")==1|\n              percent_rank(estimate)==1\n              ~str_replace(NAME,\"(.+)(,.+)\",\"\\\\1\") %>% str_remove(\" County\")\n            ,TRUE~NA_character_\n          )\n        ) %>%\n        ggplot()+\n          #geom for plotting shapefile polygons\n          geom_sf(\n              size=0.05\n              ,color=\"#000000\"\n              ,aes(fill=as.numeric(estimate))\n          )+\n          geom_sf_label(\n              aes(label=goodlabel)\n              ,color=\"#000000\"\n              ,vjust=1\n          )+\n          coord_sf(crs=4326)+\n          scale_fill_viridis_c(\n            option=\"viridis\"\n            ,breaks=seq(0,200000,by=10000)\n            ,labels=dollar\n          )+\n          labs(\n            title=str_glue(\"{parms$NAME} Median Income by County\"),\n            subtitle=str_glue(\n              \"American Community Survey 5-Year Estimates {parms$year-4}-{parms$year}\\n\"\n              ,\"Highest and Lowest Income Counties Labelled\"\n            )\n          )+\n          guides(fill=guide_colorbar(\"Median\\nPast-Year\\nHH Income\"))+\n          theme_bw()+\n          theme_update(legend.key.height=unit(.35,\"in\"))\n      \n      list(\"state_abb\"=parms$state_abb,\"state\"=parms$NAME,\"plot\"=p)\n      \n    }\n    \n  )\n```\n:::\n\n\n\nAt this point, `maplist` has been populated, and we can extract plot objects from it. First, let's try just returning the first element. Recall that because our parameter file was sorted highest to lowest in terms of the proportion of the state population with household income below the poverty limit, the first element of our list will contain a plot for the most impoverished state.\n\n\n\n::: {.cell fig.fullwidth='true' fig.fullheight='false'}\n\n```{.r .cell-code}\npluck(maplist,1)$plot\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=960}\n:::\n:::\n\n\n\nWe can also `walk` over the list to present ranges of its elements. Here we look at the 5 least impoverished states. Note that in this case we need an explicit `print()` to force the plots out of the `walk` functional environment.\n\n\n\n::: {.cell fig.fullwidth='true' fig.fullheight='false'}\n\n```{.r .cell-code}\nwalk(50:46,~pluck(maplist,.x)$plot %>% print())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=960}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-2.png){width=960}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-3.png){width=960}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-4.png){width=960}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-5.png){width=960}\n:::\n:::\n\n\n\nOr we can extract the map corresponding to a specific state of interest. We can do this because we loaded each element of `maplist` with a list containing both a plot object *and* state identifiers.\n\n\n\n::: {.cell fig.fullwidth='true' fig.fullheight='false'}\n\n```{.r .cell-code}\ndetect(maplist,~.x$state==\"New York\")$plot\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=960}\n:::\n\n```{.r .cell-code}\ndetect(maplist,~.x$state==\"Texas\")$plot\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-2.png){width=960}\n:::\n\n```{.r .cell-code}\ndetect(maplist,~.x$state==\"California\")$plot\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-3.png){width=960}\n:::\n:::\n\n\n\nIn conclusion... maps are fun, and lists are useful!",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}